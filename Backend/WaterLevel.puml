@startuml
'https://plantuml.com/class-diagram
@startuml
package "WaterLevelMLModel_Api" {
    class WaterLevelMLModel {
        - RetrainFilePath : string
        - RetrainSeparatorChar : char
        - RetrainHasHeader : bool
        - MLNetModelPath : string
        - PredictEngine : Lazy<PredictionEngine<ModelInput, ModelOutput>>

        + Train(outputModelPath : string, inputDataFilePath : string, separatorChar : char, hasHeader : bool) : void
        + LoadIDataViewFromFile(mlContext : MLContext, inputDataFilePath : string, separatorChar : char, hasHeader : bool) : IDataView
        + SaveModel(mlContext : MLContext, model : ITransformer, data : IDataView, modelSavePath : string) : void
        + RetrainModel(mlContext : MLContext, trainData : IDataView) : ITransformer
        + BuildPipeline(mlContext : MLContext) : IEstimator<ITransformer>
        + Predict(input : ModelInput) : ModelOutput
        + CalculatePFI(mlContext : MLContext, trainData : IDataView, model : ITransformer, labelColumnName : string) : List<Tuple<string, double>>
        + CalculateRSquaredOnTrainingDataWater(mlContext : MLContext, model : ITransformer, trainingData : IDataView) : double
    }

    class ModelInput {
        + Distance : float
        + WaterLevel : float
        + BatteryLevel : float
        + Time : string
        + CreatedAt : string
    }

    class ModelOutput {
        + Distance : float
        + WaterLevel : float
        + BatteryLevel : float
        + Time : float[]
        + CreatedAt : float[]
        + Features : float[]
        + Score : float
    }
}

package "Backend.Backend.Communication_Layer" {
    class Publisher {
        + Connect() : Task
        + Publish() : Task
        + StopAsync() : Task
    }

    class Subscriber {
        + Connect() : Task
        + StopAsync() : Task
    }
}

package "WebApplication" {
    note "Configure and run web application" as N1
}

WaterLevelMLModel ..> ModelInput : uses >
WaterLevelMLModel ..> ModelOutput : uses >

@enduml
