// This file was auto-generated by ML.NET Model Builder.
using Microsoft.ML;
using Microsoft.ML.Data;
using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;

namespace WaterLevelMLModel_Api
{


    public partial class WaterLevelMLModel
    {
        /// <summary>
        /// model input class for WaterLevelMLModel.
        /// </summary>

        #region model input class

        public class ModelInput
        {
            [LoadColumn(1)]
            [ColumnName(@"distance")]
            public float Distance { get; set; }

            [LoadColumn(2)]
            [ColumnName(@"waterLevel")]
            public float WaterLevel { get; set; }

            [LoadColumn(3)]
            [ColumnName(@"batteryLevel")]
            public float BatteryLevel { get; set; }

            [LoadColumn(8)] [ColumnName(@"time")] public string Time { get; set; }

            [LoadColumn(9)]
            [ColumnName(@"createdAt")]
            public string CreatedAt { get; set; }

        }

        #endregion

        /// <summary>
        /// model output class for WaterLevelMLModel.
        /// </summary>

        #region model output class

        public class ModelOutput
        {
            [ColumnName(@"distance")] public float Distance { get; set; }

            [ColumnName(@"waterLevel")] public float WaterLevel { get; set; }

            [ColumnName(@"batteryLevel")] public float BatteryLevel { get; set; }

            [ColumnName(@"time")] public float[] Time { get; set; }

            [ColumnName(@"createdAt")] public float[] CreatedAt { get; set; }

            [ColumnName(@"Features")] public float[] Features { get; set; }

            [ColumnName(@"Score")] public float Score { get; set; }

        }

        #endregion

        private static string MLNetModelPath = Path.GetFullPath("WaterLevelMLModel.mlnet");

        public static readonly Lazy<PredictionEngine<ModelInput, ModelOutput>> PredictEngine =
            new Lazy<PredictionEngine<ModelInput, ModelOutput>>(() => CreatePredictEngine(), true);


        private static PredictionEngine<ModelInput, ModelOutput> CreatePredictEngine()
        {
            var mlContext = new MLContext();
            ITransformer mlModel = mlContext.Model.Load(MLNetModelPath, out var _);
            return mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);
        }

        /// <summary>
        /// Use this method to predict on <see cref="ModelInput"/>.
        /// </summary>
        /// <param name="input">model input.</param>
        /// <returns><seealso cref=" ModelOutput"/></returns>
        public static ModelOutput Predict(ModelInput input)
        {
            var predEngine = PredictEngine.Value;
            return predEngine.Predict(input);
        }

    }
}